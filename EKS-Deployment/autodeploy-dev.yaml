# Dev CI/CD
env:
  NAMESPACE: fastapi
  ECR_REPOSITORY: dev-fastapi
  ECR_TEMP_REPOSITORY: github-action
  DEPLOYMENT_NAME: deployment-fastapi
  fastapi: app-fastapi
  LOG_FILE_NAME: fastapi
  SLACK_CHANNELS: github-ci-cd
  ENVIRONMENT: Dev
  SECRET_NAME: dev/fastapi/env

name: Build, Test and Deploy
on:
  push:
    branches:
      - development
jobs:
  Build:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ap-south-1

    - name: Login to ECR
      id: ecr-login
      uses: aws-actions/amazon-ecr-login@v1
      with:
        registry: ${{ secrets.ECR_REGISTRY }}

    - name: Build the Docker Image
      id: Build
      continue-on-error: true
      env:
        ECR_REGISTRY: ${{ secrets.ECR_REGISTRY }}
        IMAGE_TAG: ${{ github.sha }}

      run: |
        mkdir log
        #rm -rf requirements.txt
        echo "Build the image with Hash Tag"
        echo -e "$ENVIRONMENT $LOG_FILE_NAME Docker Build Error Logs \n" >> log/log.txt
        docker build -t $ECR_REGISTRY/$ECR_TEMP_REPOSITORY:$NAMESPACE-$IMAGE_TAG . &>> log/log.txt
        docker push $ECR_REGISTRY/$ECR_TEMP_REPOSITORY:$NAMESPACE-$IMAGE_TAG

    - name: Uploading Error Log of Build
      if: steps.Build.outcome == 'failure'
      uses: actions/upload-artifact@master
      with:
        name: Error Log File
        path: log

    - name: Trying to Exit
      if: steps.Build.outcome == 'failure'
      run: |
        exit 1

  Test:
    runs-on: ubuntu-latest
    needs: Build
    steps:

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ap-south-1

# Make sure to modify the image sections as per your Image.  
    - name: Security Check - Container Security - Trivy
      uses: aquasecurity/trivy-action@master
      with:
        image-ref:  ${{ secrets.ECR_REGISTRY }}/github-action:fastapi-${{ github.sha }}
        format: 'table'
        ignore-unfixed: true
        severity: 'CRITICAL,HIGH,MEDIUM,LOW'

    - name: Login to ECR
      id: ecr-login
      uses: aws-actions/amazon-ecr-login@v1
      with:
        registry: ${{ secrets.ECR_REGISTRY }}

    - name: Checking the Port
      continue-on-error: true
      id: Test
      env:
        ECR_REGISTRY: ${{ secrets.ECR_REGISTRY }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker run --name fastapi -d -p 8000:8000 \
        -e aws_access_key=${{ secrets.AWS_ACCESS_KEY_ID }} \
        -e aws_secret_key=${{ secrets.AWS_SECRET_ACCESS_KEY }} \
        -e aws_secret_name=$SECRET_NAME \
        $ECR_REGISTRY/$ECR_TEMP_REPOSITORY:$NAMESPACE-$IMAGE_TAG
        echo "Sleep for 10 Sec"
        sleep 10
         if ! netstat -tulpn | grep 8000; then
            echo "Port 8000 not open. Test failed."
            mkdir log
            echo -e "$ENVIRONMENT $LOG_FILE_NAME Docker Test Logs \n" >> log/log.txt
            docker logs fastapi &>> log/log.txt
            echo "++++++++++++++++++++++++++++++++++++++++++++++++++++++++++"
            cat log/log.txt
            echo "++++++++++++++++++++++++++++++++++++++++++++++++++++++++++"
            exit 1
          fi

    - name: Uploading Error Logs of Test
      if: steps.Test.outcome == 'failure'
      uses: actions/upload-artifact@master
      with:
        name: Error Log File
        path: log

    - name: Trying to Exit
      if: steps.Test.outcome == 'failure'
      run: |
        exit 1

  Push:
    runs-on: ubuntu-latest
    needs: Test
    steps:
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ap-south-1

    - name: Login to ECR
      id: ecr-login
      uses: aws-actions/amazon-ecr-login@v1
      with:
        registry: ${{ secrets.ECR_REGISTRY }}
    - name: Pushing Docker Image to ECR
      id: Push
      env:
        ECR_REGISTRY: ${{ secrets.ECR_REGISTRY }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        echo "Pulling from Temp Repo"
        docker pull $ECR_REGISTRY/$ECR_TEMP_REPOSITORY:$NAMESPACE-$IMAGE_TAG
        docker image tag $ECR_REGISTRY/$ECR_TEMP_REPOSITORY:$NAMESPACE-$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        docker image tag $ECR_REGISTRY/$ECR_TEMP_REPOSITORY:$NAMESPACE-$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
        echo "Pushing the Image to ECR with Hash Tag"
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        echo "Pushing the Image to ECR with Latest Tag"
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
        aws ecr batch-delete-image --repository-name $ECR_TEMP_REPOSITORY --image-ids imageTag=$NAMESPACE-$IMAGE_TAG

  Deploy:
    runs-on: ubuntu-latest
    needs: Push
    steps:
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ap-south-1

    - name: Deploying the Image in the Kubernetes
      id: Deploy
      run: |
        mkdir log

    - name: Deploying the Image in the Kubernetes Cluster
      uses: ishwar0007/kubectl-aws-eks@master

      env:
        KUBE_CONFIG_DATA: ${{ secrets.KUBECONFIG }}
        ECR_REGISTRY: ${{ secrets.ECR_REGISTRY }}
        IMAGE_TAG: ${{ github.sha }}
      with:
        args: set image deployment/$DEPLOYMENT_NAME $fastapi=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -n $NAMESPACE

    - name: verify deployment
      uses: ishwar0007/kubectl-aws-eks@master
      env:
        KUBE_CONFIG_DATA: ${{ secrets.KUBECONFIG }}
      with:
        args: rollout status deployment/$DEPLOYMENT_NAME -n $NAMESPACE
      timeout-minutes: 3
      continue-on-error: true
      id: verify-deployment
    - name: retry deployment verification
      if: ${{ steps.verify-deployment.outcome == 'timed_out' }}
      run: |
        echo "Deployment verification timed out, retrying in 2 minutes..."
        sleep 120
        kubectl rollout status deployment/$DEPLOYMENT_NAME -n $NAMESPACE

    - name: Delay for 2 minutes
      run: sleep 120

    - name: Check pod status and send logs
      env:
        KUBE_CONFIG_DATA: ${{ secrets.KUBECONFIG }}
      run: |
        echo "$KUBE_CONFIG_DATA" | base64 -d > KUBECONFIG.yaml
        export KUBECONFIG=./KUBECONFIG.yaml
        deployment_name=$(kubectl get deployments -n $NAMESPACE | sed -n '2 p' | awk  '{print $1}')
        echo "Deployment Name =" $deployment_name
        deployment_status=$(kubectl describe deployment $deployment_name -n $NAMESPACE | grep -w 'Available' | awk '{print $2}')
        echo "Deployment Status =" $deployment_status
        if [[ "$deployment_status" == "False" ]]; then
          echo "$ENVIRONMENT $LOG_FILE_NAME deployment is in error state, sending logs to Slack..."
          echo -e "$ENVIRONMENT $LOG_FILE_NAME Deployment Logs \n" >> log/log.txt
          kubectl logs deployment/$deployment_name -n $NAMESPACE >> log/log.txt
        else
          echo -e "$ENVIRONMENT $LOG_FILE_NAME Deployment Logs \n" >> log/log.txt
          echo "$ENVIRONMENT $LOG_FILE_NAME deployment is successfully deployed without any error state" >> log/log.txt
        fi

    - name: Uploading Error Log of Deployment
      if: steps.Deploy.outcome == 'success'
      uses: actions/upload-artifact@master
      with:
        name: Error Log File
        path: log

  Alert_Notification:
    runs-on: ubuntu-latest
    if: ${{ always() && contains(join(needs.*.result, ','), 'success') }} ||  ${{ always() && contains(join(needs.*.result, ','), 'failure') }}
    needs: [Build, Test, Push, Deploy]
    steps:
    - name: Downloading Log
      uses: actions/download-artifact@master
      with:
        name: Error Log File
        path: log

    - name: Trying to Push Notification
      run: |
       if cat log/log.txt | grep "$ENVIRONMENT $LOG_FILE_NAME Docker Build Error Logs" >> /dev/null; then
              curl -F file=@log/log.txt -F "initial_comment=Docker Build Error Logs of $ENVIRONMENT $LOG_FILE_NAME" -F channels=$SLACK_CHANNELS -H "Authorization: Bearer ${{ secrets.SLACK_TOKEN }}" https://slack.com/api/files.upload
       elif cat log/log.txt | grep "$ENVIRONMENT $LOG_FILE_NAME Docker Test Logs" >> /dev/null; then
              curl -F file=@log/log.txt -F "initial_comment=Docker Test Error Logs of $ENVIRONMENT $LOG_FILE_NAME" -F channels=$SLACK_CHANNELS -H "Authorization: Bearer ${{ secrets.SLACK_TOKEN }}" https://slack.com/api/files.upload
       elif cat log/log.txt | grep "$ENVIRONMENT $LOG_FILE_NAME Deployment Logs" >> /dev/null; then
              curl -F file=@log/log.txt -F "initial_comment=Deployment Logs of $ENVIRONMENT $LOG_FILE_NAME" -F channels=$SLACK_CHANNELS -H "Authorization: Bearer ${{ secrets.SLACK_TOKEN }}" https://slack.com/api/files.upload
       fi
